import java.util.Arrays;
import java.util.PriorityQueue;

public class GFG{

	public static void main(String[] args) {

		int[] arr1={1,3,5,7};
		int[] arr2={2,4,6,8};
		int[] arr3={0,9,10,11};
		int[] result=mergeSortedArrays(new int[][]{arr1,arr2,arr3});

		System.out.println(Arrays.toString(result));

	}
	public static int[] mergeSortedArrays(int arr[][]){
		int total=0;
		PriorityQueue<ArrayContainer> pq=new PriorityQueue<>();
		for (int i=0;i<arr.length;i++){
			pq.add(new ArrayContainer(arr[i], 0));
			total=total+arr[i].length;
		}
		int m=0;
		int[] result=new int[total];

		while(!pq.isEmpty()){
			ArrayContainer ac=pq.poll();
			result[m++]=ac.arr[ac.index];
           if(ac.index<ac.arr.length-1){
        	   pq.add(new ArrayContainer(ac.arr, ac.index+1));
           }
		}



		return result;

	}
}


public class ArrayContainer implements Comparable<ArrayContainer> {

	int[] arr;
	int index;

	public ArrayContainer(int[] arr, int index) {

		this.arr = arr;
		this.index = index;
	}

	@Override
	public int compareTo(ArrayContainer inserted) {
		return this.arr[this.index]-inserted.arr[inserted.index];

	}

}

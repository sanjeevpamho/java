Traverse the list one by one and keep putting the node addresses in a Hash Table. 
At any point, if NULL is reached then return false 
and if next of current node points to any of the previously stored nodes in Hash then return true.

 // Returns true if there is a loop in linked 
    // list else returns false. 
    static boolean detectLoop(Node h) 
    { 
        HashSet<Node> s = new HashSet<Node>(); 
        while (h != null) 
        { 
             // If we have already has this node 
             // in hashmap it means their is a cycle 
             // (Because you we encountering the 
             // node second time). 
            if (s.contains(h)) 
                return true; 
    
            // If we are seeing the node for 
            // the first time, insert it in hash 
            s.add(h); 
    
            h = h.next; 
        } 
    
        return false; 
    } 
	
	
	//OR//
	Floyd’s Cycle-Finding Algorithm:
This is the fastest method. Traverse linked list using two pointers.  
Move one pointer by one and other pointer by two.  If these pointers meet at same node then there is a loop.  
If pointers do not meet then linked list doesn’t have loop.

int detectLoop() 
    { 
        Node slow_p = head, fast_p = head; 
        while (slow_p != null && fast_p != null && fast_p.next != null) { 
            slow_p = slow_p.next; 
            fast_p = fast_p.next.next; 
            if (slow_p == fast_p) { 
                System.out.println("Found loop"); 
                return 1; 
            } 
        } 
        return 0; 
    } 
package code.bind;

import java.util.*; 
import java.util.LinkedList;

  
class GFG 
{ 
    Node head; 
  
    /* Utility function to insert a node at the beginning */
    void push(int new_data) 
    { 
        Node new_node = new Node(new_data); 
        new_node.next = head; 
        head = new_node; 
    } 
  
    /* Utility function for displaying linked list */
    void printList() 
    { 
        Node node = head; 
        while (node != null) 
        { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
        System.out.println(""); 
    } 
  
    /* Utility function for calculating length of linked list */
    int countNodes() 
    { 
        int count = 0; 
        Node s = head; 
        while (s != null) 
        { 
            count++; 
            s = s.next; 
        } 
        return count; 
    } 
  
    /* Function for swapping kth nodes from both ends of 
       linked list */
    void swapKth(int k) 
    { 
        // Count nodes in linked list 
        int n = countNodes(); 
  
        // Check if k is valid 
        if (n < k) 
            return; 
  
        // If x (kth node from start) and y(kth node from end) 
        // are same 
        if (2*k - 1 == n) 
            return; 
  
        // Find the kth node from beginning of linked list. 
        // We also find previous of kth node because we need 
        // to update next pointer of the previous. 
        Node currX = head; 
        Node prevX = null; 
        for (int i = 1; i < k; i++) 
        { 
            prevX = currX; 
            currX = currX.next; 
        } 
  
        // Similarly, find the kth node from end and its  
        // previous. kth node from end is (n-k+1)th node 
        // from beginning 
        Node currY = head; 
        Node prevY = null; 
        for (int i = 1; i < n - k + 1; i++) 
        { 
            prevY = currY; 
            currY = currY.next; 
        } 
  
        // If prevX exists, then new next of it will be currY. 
        // Consider the case when currY->next is currX, in this case, 
        // prevX and currY are same. So the statement  
        // "prevX->next = currY" creates a self loop. This self 
        // loop will be broken when we change currY->next. 
        if (prevX != null) 
            prevX.next = currY; 
  
        // Same thing applies to prevY 
        if (prevY != null) 
            prevY.next = currX; 
  
        // Swap next pointers of x and y. These statements 
        // also break self loop if x->next is y or y->next 
        // is x 
        Node temp = currX.next; 
        currX.next = currY.next; 
        currY.next = temp; 
  
        // Change head pointers when k is 1 or n 
        if (k == 1) 
            head = currY; 
  
        if (k == n) 
            head = currX; 
    } 
  
    // Driver code to test above 
    public static void main(String[] args) 
    { 
        GFG llist = new GFG(); 
        for (int i = 8; i >= 1; i--) 
            llist.push(i); 
  
        System.out.print("Original linked list: "); 
        llist.printList(); 
        System.out.println(""); 
  
        for (int i = 1; i < 9; i++) 
        { 
            llist.swapKth(i); 
            System.out.println("Modified List for k = " + i); 
            llist.printList(); 
            System.out.println(""); 
        } 
    } 
} 
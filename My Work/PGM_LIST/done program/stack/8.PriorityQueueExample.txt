import java.util.*;
 
class Example
{
    public static void main(String args[])
    {
        // Creating empty priority queue
        PriorityQueue<String> pQueue =
                          new PriorityQueue<String>();
 
        // Adding items to the pQueue using add()
        pQueue.add("C");
        pQueue.add("C++");
        pQueue.add("Java");
        pQueue.add("Python");
 
        // Printing the most priority element
        System.out.println("Head value using peek function:"
                                           + pQueue.peek());
 
        // Printing all elements
        System.out.println("The queue elements:");
        Iterator itr = pQueue.iterator();
        while (itr.hasNext())
            System.out.println(itr.next());
 
        // Removing the top priority element (or head) and
        // printing the modified pQueue using poll()
        pQueue.poll();
        System.out.println("After removing an element" +
                           "with poll function:");
        Iterator<String> itr2 = pQueue.iterator();
        while (itr2.hasNext())
            System.out.println(itr2.next());
 
        // Removing Java using remove()
        pQueue.remove("Java");
        System.out.println("after removing Java with" +
                           " remove function:");
        Iterator<String> itr3 = pQueue.iterator();
        while (itr3.hasNext())
            System.out.println(itr3.next());
 
        // Check if an element is present using contains()
        boolean b = pQueue.contains("C");
        System.out.println ( "Priority queue contains C " +
                             "or not?: " + b);
 
        // Getting objects from the queue using toArray()
        // in an array and print the array 
        Object[] arr = pQueue.toArray();
        System.out.println ( "Value in array: ");
        for (int i = 0; i<arr.length; i++)
          System.out.println ( "Value: " + arr[i].toString()) ;
    }
}





/*
Output:

Head value using peek function:C
The queue elements:
C
C++
Java
Python
After removing an elementwith poll function:
C++
Python
Java
after removing Java with remove function:
C++
Python
Priority queue contains C or not?: false
Value in array: 
Value: C++
Value: Python
*/


===============
with Comparator

// Java program to demonstrate working of 
// comparator based priority queue constructor
import java.util.*;
 
public class Example {
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        // Creating Priority queue constructor having 
        // initial capacity=3 and a StudentComparator instance 
        // as its parameters
        PriorityQueue<Student> pq = new
             PriorityQueue<Student>(5, new StudentComparator());
                 
                // Invoking a parameterized Student constructor with 
                // name and cgpa as the elements of queue
                Student student1 = new Student("Nandini", 3.2);
                 
                // Adding a student object containing fields 
                // name and cgpa to priority queue 
                pq.add(student1);
                Student student2 = new Student("Anmol", 3.6);
                        pq.add(student2);         
                Student student3 = new Student("Palak", 4.0);
                        pq.add(student3);
                 
                // Printing names of students in priority order,poll()
                // method is used to access the head element of queue
                System.out.println("Students served in their priority order");
                 
                while (!pq.isEmpty()) {
                System.out.println(pq.poll().getName());
        } 
    }
} 
 
class StudentComparator implements Comparator<Student>{
             
            // Overriding compare()method of Comparator 
                        // for descending order of cgpa
            public int compare(Student s1, Student s2) {
                if (s1.cgpa < s2.cgpa)
                    return 1;
                else if (s1.cgpa > s2.cgpa)
                    return -1;
                                return 0;
                }
        }
 
class Student {
    public String name;
    public double cgpa;
         
    // A parameterized student constructor
    public Student(String name, double cgpa) {
     
        this.name = name;
        this.cgpa = cgpa;
    }
     
    public String getName() {
        return name;
    } 
}


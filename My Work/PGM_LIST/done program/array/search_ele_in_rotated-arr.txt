
package code.bind;
import java.io.*;
import java.util.Arrays;
import java.util.HashMap;




public class Test   { 
	public static void main (String[] args)  
	{

		int arr1[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}; 
		int n = arr1.length; 
		int key = 3; 
		System.out.println("Index of the element is : "
				+ pivotedBinarySearch(arr1, n, key)); 
	} 
	

	static int pivotedBinarySearch(int arr[], int n, int key) 
	{ 
		int pivot = findPivot(arr, 0, n-1); 
		System.out.println("pivot:"+pivot);
		// If we didn't find a pivot, then  
		// array is not rotated at all 
		if (pivot == -1) 
			return binarySearch(arr, 0, n-1, key); 

		// If we found a pivot, then first  
		// compare with pivot and then 
		// search in two subarrays around pivot 
		if (arr[pivot] == key) 
			return pivot; 
		if (arr[0] <= key) 
			return binarySearch(arr, 0, pivot-1, key); 
		return binarySearch(arr, pivot+1, n-1, key); 
	} 
	public static int binarySearch(int[] arr,int l,int r,int x){
		if(r>= l){
			int m=(l+r)/2;
			if(arr[m]==x) return m;
			if(x < arr[m]) return binarySearch(arr, l, m-1, x);
			return binarySearch(arr, m+1, r, x);
		}
		return -1;
	}
	static int findPivot(int arr[], int low, int high) 
	{ 
		// base cases 
		if (high >= low){   

			if (high == low)  
				return low; 

			/* low + (high - low)/2; */
			int mid = (low + high)/2;    
			if (mid < high && arr[mid] > arr[mid + 1]) 
				return mid; 
			if (mid > low && arr[mid] < arr[mid - 1]) 
				return (mid-1); 
			if (mid < high && arr[mid]< arr[mid+1])
				return findPivot(arr, mid + 1, high); 

			return findPivot(arr, low, mid-1); 

		}
		return -1;
	} 
} 

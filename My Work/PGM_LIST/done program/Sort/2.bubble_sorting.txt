package selenium_testing;

import java.util.ArrayList;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;


public class Test_Selenium {

	//bubble sorting

	public static void main (String[] args) throws java.lang.Exception
	{
		int[] myList = {20, 10, 90, 23,5,16};

		// Print all the array elements
		for (int i = 0; i < myList.length; i++) {
			System.out.print(myList[i] + " ");
		}
		System.out.println();
		bubbleSort(myList,myList.length);

		System.out.println("Final Output");

		for (int i = 0; i < myList.length; i++) {
			System.out.print(myList[i] + " ");
		}
	}

	public static void bubbleSort(int myList[],int n){
		int i,j,t;
		for(i=0;i<n-1;i++){


			for(j=0;j<n-i-1;j++){

				if(myList[j]>myList[j+1]){
					
					t=myList[j];
					myList[j]=myList[j+1];
					myList[j+1]=t;


				}
				System.out.println("After pass"+(i+1));
				
				for (int k = 0; k < myList.length; k++) {
					System.out.print(myList[k] + " ");
				}
				System.out.println();
			}
		}

	}
}

/*

Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted.

Best Case Time Complexity: O(n). Best case occurs when array is already sorted.

Auxiliary Space: O(1)

Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted.

*/
